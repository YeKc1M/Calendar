package Calendar;

import Date.*;
import ManageEventUI.ManageEventUI;
import SelectMonthUI.SelectMonthUI;
import Event.Event;
import javafx.scene.media.MediaPlayer;
import javazoom.jl.player.Player;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;

public class Calendar extends JFrame{
    private String serverAddr="localhost";
    final int serverPort=10086;
    private Socket calendarSocket;
    private PrintWriter out;
    private Date now=new Date();
    private Date set=new Date();
    private MonthSelectBtn monthSelectBtn=new MonthSelectBtn();
    private MonthPanel monthPanel;
    public Calendar(){
        try{
            calendarSocket=new Socket(serverAddr, serverPort);
            System.out.println(calendarSocket);
            out=new PrintWriter(calendarSocket.getOutputStream());
        }catch(UnknownHostException UHE){
            UHE.printStackTrace();
        }catch (IOException IOE){
            IOE.printStackTrace();
        }
        new ServerThread(calendarSocket).start();
        this.setLayout(new BorderLayout());
        this.add(new JPanel(){
            {
                this.add(monthSelectBtn);
            }
        }, BorderLayout.NORTH);
        monthPanel=new MonthPanel();
        this.add(monthPanel, BorderLayout.CENTER);
    }
    public Socket CalendarSocket(){return calendarSocket;}
    class MonthSelectBtn extends JButton{
        public MonthSelectBtn(){
            refreshMonthSlectBtn();
            this.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    SelectMonthUI.run(new SelectMonthUI(Calendar.this), 350, 300);
                }
            });
        }
        public void refreshMonthSlectBtn(){
            this.setText(set.Year()+"-"+set.Month());
        }
    }
    class MonthPanel extends JPanel{
        private DatesPanel datesPanel=new DatesPanel();
        public MonthPanel(){
            this.setLayout(new BorderLayout());
            this.add(new JPanel(){
                {
                    this.setLayout(new GridLayout(1, 7));
                    this.add(new JLabel("������"){{ this.setHorizontalAlignment(JLabel.CENTER); }});
                    this.add(new JLabel("����һ"){{ this.setHorizontalAlignment(JLabel.CENTER); }});
                    this.add(new JLabel("���ڶ�"){{ this.setHorizontalAlignment(JLabel.CENTER); }});
                    this.add(new JLabel("������"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                    this.add(new JLabel("������"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                    this.add(new JLabel("������"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                    this.add(new JLabel("������"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                }
            }, BorderLayout.NORTH);
            this.add(datesPanel);
        }
        class DatesPanel extends JPanel{
            Color normalColor=new JButton().getBackground();
            private DateButton dateButtons[]=new DateButton[42];
            public DatesPanel(){
                this.setLayout(new GridLayout(6,7 ));
                for(int i=0;i<dateButtons.length;i++){
                    dateButtons[i]=new DateButton();
                    this.add(dateButtons[i]);
                }
                refreshButtons();
                try{
                    //InputStream in=calendarSocket.getInputStream();
                    //BufferedReader bf=new BufferedReader(new InputStreamReader(in));
                    Event events[];
                    int eventCounter=0;
                    for(int i=0;i<dateButtons.length;i++){
                        File file=new File(dateButtons[i].Path());
                        if(file.exists()){
                            try(ObjectInputStream inputStream=new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)))){
                                while (inputStream.read()!=-1){
                                    eventCounter++;
                                    inputStream.readObject();
                                }
                            }catch (EOFException e){
                                continue;
                            }catch (Exception e){
                                e.printStackTrace();
                            }
                            events=new Event[eventCounter];
                            eventCounter=0;
                            ObjectInputStream inputStream2=new ObjectInputStream(new BufferedInputStream(new FileInputStream(dateButtons[i].Path())));
                            for(int j=0;j<events.length;j++){
                                inputStream2.read();
                                Event event=(Event)inputStream2.readObject();
                                if(event.status==Event.ADD||event.status==Event.DELETE){
                                    out.println(dateButtons[i].date+" "+event.send());
                                    out.flush();
                                    /*String line;
                                    if((line=bf.readLine())!=null){
                                        System.out.println(line);
                                        String s[]=line.split(" ");
                                        //String eventInfo[]=s[1].split(":");
                                        event.status=Integer.parseInt(s[2]);
                                    }*/
                                }
                                /*events[j]=event;
                                if(events[j].status==Event.DELETED){
                                    events[j]=null;
                                }*/
                            }/*
                            ObjectOutputStream outputStream=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(dateButtons[i].Path())));
                            for(int j=0;j<events.length;j++){
                                if(events[j]!=null){
                                    outputStream.writeByte(0);
                                    outputStream.writeObject(events[j]);
                                    outputStream.flush();
                                }
                            }*/
                        }
                    }
                }catch(SocketException e) {
                    e.printStackTrace();
                }catch (EOFException e) {
                    e.printStackTrace();
                }catch (Exception e){
                    e.printStackTrace();
                }
            }
            public void refreshButtons(){
                int temp=(set.WeekInMonth()-1)*7+set.DayInWeek()-1;
                if(temp==set.Date()-1) temp+=7;
                dateButtons[temp].setDate(set);
                for(int i=temp-1;i>=0;i--){
                    dateButtons[i].setDate(dateButtons[i+1].date.beforeDate());
                }
                for(int i=temp+1;i<dateButtons.length;i++){
                    dateButtons[i].setDate(dateButtons[i-1].date.nextDate());
                }
                for(int i=0;i<dateButtons.length;i++){
                    dateButtons[i].setBackground(normalColor);
                    if(!dateButtons[i].isSameMonth()) dateButtons[i].setBackground(Color.GRAY);
                    if(dateButtons[i].date.equal(now)) dateButtons[i].setBackground(Color.RED);
                    dateButtons[i].dateLabel.setText(dateButtons[i].date.Date()+"");
                }
                for(int i=0;i<dateButtons.length;i++){
                    for(int j=0;j<5;j++){
                        dateButtons[i].eventLabels[j].setText("");
                    }
                    File file=new File(dateButtons[i].Path());
                    if(file.exists()){
                        int eventCounter=0;
                        try(ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)))){
                            int counter=0;
                            while(in.read()!=-1){
                                if(counter>=5){
                                    eventCounter++;
                                    in.readObject();
                                    continue;
                                }
                                Event event=(Event)in.readObject();
                                if(event.status==Event.DELETE||event.status==Event.DELETED){
                                    eventCounter++;
                                    continue;
                                }
                                dateButtons[i].eventLabels[counter++].setText(event+"");
                                eventCounter++;
                                dateButtons[i].repaint();
                                dateButtons[i].revalidate();
                            }
                        }catch (EOFException EOF){
                        }catch (Exception e){
                            e.printStackTrace();
                        }
                    }
                }
            }
            class DateButton extends JButton{
                private Date date=new Date();
                private JLabel dateLabel=new JLabel(){{this.setHorizontalAlignment(JLabel.CENTER);}};
                private JLabel eventLabels[]=new JLabel[5];
                public DateButton(){
                    this.setLayout(new GridLayout(6, 1));
                    this.add(dateLabel);
                    for(int i=0;i<eventLabels.length;i++){
                        eventLabels[i]=new JLabel();
                        eventLabels[i].setHorizontalAlignment(JLabel.CENTER);
                        this.add(eventLabels[i]);
                    }
                    this.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            if(isSameMonth()){
                                set.set(date.Year(), date.Month(), date.Date());
                                SelectMonthUI.run(new ManageEventUI(set, Calendar.this), 100, 250);
                            }else{
                                set.set(date.Year(), date.Month(), date.Date());
                                refreshButtons();
                                monthSelectBtn.refreshMonthSlectBtn();
                            }
                        }
                    });
                }
                public boolean isSameMonth(){return date.Year()==set.Year()&&date.Month()==set.Month();}
                public void setDate(Date d){
                    date.set(d.Year(), d.Month(), d.Date());
                }
                public String Path(){
                    return "events\\"+date.Year()+"-"+date.Month()+"\\"+date.Date()+".ser";
                }
            }
        }
    }
    public void setSet(Date d){ set.set(d.Year(), d.Month(), d.Date());}
    public void refreshCalendar(){
        monthPanel.datesPanel.refreshButtons();
        monthSelectBtn.refreshMonthSlectBtn();
    }
    public Date Set(){return set;}
    public static void run(JFrame jf, int width, int height){
        jf.setVisible(true);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jf.setSize(width, height);
    }
    public static void main(String[] args){
        run(new Calendar(), 600, 600);
        //new RingFrame();
    }
}

class ServerThread extends Thread{
    private Socket socket;
    public ServerThread(Socket s){
        socket=s;
    }
    public void run(){
        InputStream in=null;
        try{
            in = socket.getInputStream();
        }catch (IOException e){
            e.printStackTrace();
        }
        BufferedReader bf = new BufferedReader(new InputStreamReader(in));
        String line;
        while(true){
            try {
                while ((line = bf.readLine()) != null){
                    System.out.println(line);
                    if(line.equals("ring")){
                        new RingFrame();
                    }else{
                        String[] s = line.split(" ");
                        String[] dateInfo=s[0].split("-");
                        String[] eventInfo=s[1].split(":");
                        int status = Integer.parseInt(s[2]);
                        Date date=new Date(Integer.parseInt(dateInfo[0]), Integer.parseInt(dateInfo[1]), Integer.parseInt(dateInfo[2]));
                        Event event=new Event(Integer.parseInt(eventInfo[0]), Integer.parseInt(eventInfo[1]));
                        int counter=0;
                        try(ObjectInputStream inputStream=new ObjectInputStream(new BufferedInputStream(new FileInputStream(date.Path())))){
                            while(inputStream.read()!=-1){
                                counter++;
                                inputStream.readObject();
                            }
                        }catch (EOFException e){
                            e.printStackTrace();
                        }catch (Exception e){
                            e.printStackTrace();
                        }
                        Event events[]=new Event[counter];
                        try(ObjectInputStream inputStream=new ObjectInputStream(new BufferedInputStream(new FileInputStream(date.Path())))){
                            int i=0;
                            while(inputStream.read()!=-1){
                                events[i++]=(Event)inputStream.readObject();
                            }
                        }catch (EOFException e){
                            e.printStackTrace();
                        }catch (Exception e){
                            e.printStackTrace();
                        }
                        for(int i=0;i<counter;i++){
                            if(events[i].equal(event))
                                events[i].status=status;
                        }
                        try(ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(date.Path())))){
                            for(int i=0;i<counter;i++){
                                if(events[i].status==Event.DELETED)
                                    continue;
                                out.writeByte(0);
                                out.writeObject(events[i]);
                                out.flush();
                            }
                        }catch (Exception e){
                            e.printStackTrace();
                        }
                    }
                }
            }catch (Exception e1){
                e1.printStackTrace();
            }
        }
    }
}

class RingFrame extends JFrame{
    private ServerRingThread ringThread=new ServerRingThread();
    public RingFrame(){
        this.setVisible(true);
        this.setSize(200, 150);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ringThread.start();
        this.setLayout(new BorderLayout());
        this.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                ringThread.stop();
                System.out.println("ring stops");
            }
        });
    }
}

class ServerRingThread extends Thread{
    private Player player;
    public void run(){
        try{
            player=new Player(new BufferedInputStream(new FileInputStream("ring.mp3")));
            player.play();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}

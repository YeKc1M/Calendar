package ManageEventUI;


import Date.*;
import Event.Event;
import SelectMonthUI.SelectMonthUI;
import Calendar.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.*;
import java.util.concurrent.TimeUnit;

public class ManageEventUI extends JFrame{
    Socket ManageEventSocket;
    //String host="localhost";
    //final int serverPort=10086;
    PrintWriter out;
    Calendar calendar;
    int eventCounter=0;
    Date date=new Date();
    JPanel panel=new JPanel();
    EventButton[] eventButtons;
    private JButton addButtn=new JButton("add event"){{ this.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.out.println("add event and send it to server");
                }}); }};
    public ManageEventUI(Date d, Calendar c){
        calendar=c;
        try{
            ManageEventSocket=calendar.CalendarSocket();
            System.out.println(ManageEventSocket);
            out=new PrintWriter(ManageEventSocket.getOutputStream());
        }catch (NullPointerException NPE){
        }catch(UnknownHostException UHE){
            UHE.printStackTrace();
        }catch (IOException IOE){
            IOE.printStackTrace();
        }
        date.set(d.Year(), d.Month(), d.Date());
        File file=new File("events\\"+date.Year()+"-"+date.Month());
        if(!file.exists()) file.mkdir();
        file=new File(Path());
        if(!file.exists()){
            try{
                file.createNewFile();
            }catch (Exception e){e.printStackTrace();}
        }
        try(ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(new FileInputStream(Path())))){
            while(in.read()!=-1){
                Event event=(Event)in.readObject();
                if(event.status!=Event.DELETE)
                    eventCounter++;
            }
            in.close();
        }catch (EOFException EOFE){
            eventCounter=0;
        }catch(Exception e){e.printStackTrace();}
        eventButtons=new EventButton[eventCounter];
        this.add(new JScrollPane(panel));
        panel.setLayout(new GridLayout(eventCounter>8? eventCounter+2:10, 1));
        panel.add(new JLabel(date.Date()+"��"){{this.setHorizontalAlignment(JLabel.CENTER);}});
        panel.add(new JButton("add event"){
            {
                this.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        SelectMonthUI.run(new AddEventUI(), 200, 150);
                    }
                });
            }
        });
        if(eventCounter!=0){
            try(ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(new FileInputStream(Path())))){
                int counter=0;
                while(in.read()!=-1){
                    Event event=(Event)in.readObject();
                    if(event.status!=Event.DELETE){
                        eventButtons[counter]=new EventButton(event);
                        panel.add(eventButtons[counter++]);
                    }
                }
                //in.close();
            }catch (Exception E){E.printStackTrace();}
        }
    }
    public String Path(){return "events\\"+date.Year()+"-"+date.Month()+"\\"+date.Date()+".ser";}
    class AddEventUI extends JFrame{
        private JTextField hourField=new JTextField();
        private JTextField minuteField=new JTextField();
        public AddEventUI(){
            this.setLayout(new GridLayout(3, 1));
            this.add(new JPanel(){{
                this.setLayout(new GridLayout(1, 2));
                this.add(new JLabel("hour:"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                this.add(hourField);
            }});
            this.add(new JPanel(){{
                this.setLayout(new GridLayout(1, 2));
                this.add(new JLabel("minute:"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                this.add(minuteField);
            }});
            this.add(new JPanel(){{
                this.add(new JButton("ȷ��"){{
                    this.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            Event temp = new Event(Integer.parseInt(hourField.getText()), Integer.parseInt(minuteField.getText()));
                            try{
                                for(int i=0;i<eventButtons.length;i++)
                                    if(eventButtons[i].event.equal(temp))
                                        throw new EventAlreadyExistException();
                                eventCounter++;
                                EventButton[] holder=new EventButton[eventCounter];
                                for(int i=0;i<eventButtons.length;i++){
                                    holder[i]=new EventButton(eventButtons[i].event);
                                    ManageEventUI.this.panel.remove(eventButtons[i]);
                                }
                                holder[eventCounter-1]=new EventButton(temp);
                                holder[eventCounter-1].event.status=temp.status;
                                eventButtons=holder;
                                for(int i=eventCounter-1;i>0;i--){
                                    if(eventButtons[i].event.before(eventButtons[i-1].event)){
                                        Event evnt=eventButtons[i].event;
                                        eventButtons[i].setEvent(eventButtons[i-1].event);
                                        eventButtons[i-1].setEvent(evnt);
                                    }else{
                                        break;
                                    }
                                }
                                try(ObjectOutputStream outputStream=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(Path())))){
                                    for(int i=0;i<eventCounter;i++){
                                        outputStream.writeByte(0);
                                        outputStream.writeObject(eventButtons[i].event);
                                        ManageEventUI.this.panel.add(eventButtons[i]);
                                    }
                                    outputStream.flush();
                                    //
                                }catch (Exception E){
                                    E.printStackTrace();
                                }
                                try(ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(new FileInputStream(Path())))){
                                    for(int i=0;i<eventCounter;i++){
                                        in.read();
                                        eventButtons[i].setEvent((Event)in.readObject());
                                        //ManageEventUI.this.panel.add(eventButtons[i]);
                                    }
                                }catch(Exception E){
                                    E.printStackTrace();
                                }
                                try{
                                    out.println(date + " " + temp.send());
                                    out.flush();
                                }catch (Exception e1){
                                    e1.printStackTrace();
                                }
                                ManageEventUI.this.panel.repaint();
                                ManageEventUI.this.panel.revalidate();
                                calendar.refreshCalendar();
                            }catch (EventAlreadyExistException e1){
                                JOptionPane.showConfirmDialog(ManageEventUI.this, "the event has already been added",
                                        "EventAlreadyAdded", JOptionPane.YES_NO_OPTION);
                            }
                        }
                    });
                }});
                }
            });
        }
    }
    class EventButton extends JButton{
        Event event;
        public EventButton(Event e){
            event=new Event(e.getHour(), e.getMinute());
            event.status=e.status;
            this.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int result=JOptionPane.showConfirmDialog(ManageEventUI.this, "delete event?", "hint",
                            JOptionPane.YES_NO_OPTION);
                    if(result==0){
                        event.status=Event.DELETE;
                        try{
                            out.println(date+" "+event.send());
                            out.flush();
                            /*
                            InputStream in=null;
                            in=ManageEventSocket.getInputStream();
                            BufferedReader bf=new BufferedReader(new InputStreamReader(in));
                            String line;
                            if((line=bf.readLine())!=null) {
                                System.out.println(line);
                                String[] s = line.split(" ");
                                int status = Integer.parseInt(s[2]);
                                event.status=status;
                            }*/
                        }catch (Exception e1){
                            e1.printStackTrace();
                        }
                        EventButton[] holder=new EventButton[eventCounter-1];
                        int counter=0;
                        for(int i=0;i<eventButtons.length;i++){
                            ManageEventUI.this.panel.remove(eventButtons[i]);//remove buttons
                            if(eventButtons[i].event.equal(event)){
                                continue;
                            }else{
                                holder[counter++]=eventButtons[i];
                            }
                        }
                        try(ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(Path())))){
                            for(int i=0;i<eventButtons.length;i++){
                                out.writeByte(0);
                                out.writeObject(eventButtons[i].event);
                                out.flush();
                            }
                        }catch (Exception e1){
                            e1.printStackTrace();
                        }
                        eventCounter--;
                        eventButtons=holder;
                        for(int i=0;i<eventButtons.length;i++){
                            ManageEventUI.this.panel.add(eventButtons[i]);
                        }
                        ManageEventUI.this.panel.repaint();
                        ManageEventUI.this.panel.revalidate();
                    }
                calendar.refreshCalendar();
                }
            });
            refreshEventButton();
        }
        public void refreshEventButton(){
            this.setText(event+"");
        }
        public void setEvent(Event e){event=new Event(e.getHour(), e.getMinute());event.status=e.status; refreshEventButton();}
    }
    public static void main(String[] args){

    }
}

class EventAlreadyExistException extends Exception{
}

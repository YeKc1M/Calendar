package ManageEventUI;


import Date.*;
import Event.Event;
import SelectMonthUI.SelectMonthUI;
import Calendar.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.HashSet;
import java.util.Set;

public class ManageEventUI extends JFrame{
    int eventCounter=0;
    Date date=new Date();
    JPanel panel=new JPanel();
    EventButton[] eventButtons;
    private JButton addButtn=new JButton("add event"){{ this.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.out.println("add event and send it to server");
                }}); }};
    public ManageEventUI(Date d){
        date.set(d.Year(), d.Month(), d.Date());
        File file=new File("events\\"+date.Year()+"-"+date.Month());
        if(!file.exists()) file.mkdir();
        file=new File(Path());
        if(!file.exists()){
            try{
                file.createNewFile();
            }catch (Exception e){e.printStackTrace();}
        }
        try(ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(new FileInputStream(Path())))){
            while(in.read()!=-1){
                eventCounter++;
                in.readObject();
            }
            in.close();
        }catch (EOFException EOFE){
            eventCounter=0;
        }catch(Exception e){e.printStackTrace();}
        eventButtons=new EventButton[eventCounter];
        this.add(new JScrollPane(panel));
        panel.setLayout(new GridLayout(eventCounter>8? eventCounter+2:10, 1));
        panel.add(new JLabel(date.Date()+"��"){{this.setHorizontalAlignment(JLabel.CENTER);}});
        panel.add(new JButton("add event"){
            {
                this.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        SelectMonthUI.run(new AddEventUI(), 200, 150);
                    }
                });
            }
        });
        if(eventCounter!=0){
            eventButtons=new EventButton[eventCounter];
            try(ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(new FileInputStream(Path())))){
                for(int i=0;i<eventCounter;i++){
                    in.read();
                    eventButtons[i]=new EventButton((Event)in.readObject());
                    panel.add(eventButtons[i]);
                }
                in.close();
            }catch (Exception E){E.printStackTrace();}
        }
    }
    public String Path(){return "events\\"+date.Year()+"-"+date.Month()+"\\"+date.Date()+".ser";}
    class AddEventUI extends JFrame{
        private JTextField hourField=new JTextField();
        private JTextField minuteField=new JTextField();
        public AddEventUI(){
            this.setLayout(new GridLayout(3, 1));
            this.add(new JPanel(){{
                this.setLayout(new GridLayout(1, 2));
                this.add(new JLabel("hour:"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                this.add(hourField);
            }});
            this.add(new JPanel(){{
                this.setLayout(new GridLayout(1, 2));
                this.add(new JLabel("minute:"){{this.setHorizontalAlignment(JLabel.CENTER);}});
                this.add(minuteField);
            }});
            this.add(new JPanel(){{
                this.add(new JButton("ȷ��"){{
                    this.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            Event temp=new Event(Integer.parseInt(hourField.getText()),Integer.parseInt(minuteField.getText()));
                            eventCounter++;
                            EventButton[] holder=new EventButton[eventCounter];
                            for(int i=0;i<eventButtons.length;i++){
                                holder[i]=new EventButton(eventButtons[i].event);
                                ManageEventUI.this.panel.remove(eventButtons[i]);
                            }
                            holder[eventCounter-1]=new EventButton(temp);
                            eventButtons=holder;
                            for(int i=eventCounter-1;i>0;i--){
                                if(eventButtons[i].event.before(eventButtons[i-1].event)){
                                    Event evnt=eventButtons[i].event;
                                    eventButtons[i].setEvent(eventButtons[i-1].event);
                                    eventButtons[i-1].setEvent(evnt);
                                }else{
                                    break;
                                }
                            }
                            try(ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(Path())))){
                                for(int i=0;i<eventCounter;i++){
                                    out.writeByte(0);
                                    out.writeObject(eventButtons[i].event);
                                }
                                out.flush();
                                out.close();
                            }catch (Exception E){
                                E.printStackTrace();
                            }
                            for(int i=0;i<eventButtons.length;i++){
                                ManageEventUI.this.panel.add(eventButtons[i]);
                            }
                            ManageEventUI.this.panel.repaint();
                            ManageEventUI.this.panel.revalidate();
                        }
                    });
                }});
                }
            });
        }
    }
    class EventButton extends JButton{
        Event event;
        public EventButton(Event e){
            event=new Event(e.getHour(), e.getMinute());
            this.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int result=JOptionPane.showConfirmDialog(ManageEventUI.this, "delete event?", "hint",
                            JOptionPane.YES_NO_OPTION);
                    if(result==0){
                    EventButton[] holder=new EventButton[eventCounter-1];
                    int counter=0;
                    for(int i=0;i<eventButtons.length;i++){
                        ManageEventUI.this.panel.remove(eventButtons[i]);
                        if(eventButtons[i].event.equal(event)){
                            continue;
                        }else{
                            holder[counter++]=eventButtons[i];
                        }
                    }
                    eventCounter--;
                    eventButtons=holder;
                    try(ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(Path())))){
                        for(int i=0;i<eventButtons.length;i++){
                            ManageEventUI.this.panel.add(eventButtons[i]);
                            out.writeByte(0);
                            out.writeObject(eventButtons[i].event);
                        }
                        out.flush();
                        out.close();
                    }catch (Exception e1){e1.printStackTrace();}
                    ManageEventUI.this.panel.repaint();
                    ManageEventUI.this.panel.revalidate();
                }
                }
            });
            refreshEventButton();
        }
        public void refreshEventButton(){
            this.setText(event+"");
        }
        public void setEvent(Event e){event=new Event(e.getHour(), e.getMinute());}
    }
    public static void main(String[] args){

    }
}
